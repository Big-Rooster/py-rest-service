[project]
name = "py-rest-service"
version = "0.1.2"
description = "Modular Python REST service following enterprise patterns"
authors = [{name = "Your Name", email = "you@example.com"}]
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["rest", "fastapi", "microservice", "python", "async"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "py-rest-service-core", 
    "py-rest-service-persistence",
    "py-rest-service-api",
    "py-rest-service-client",
    "py-rest-service-server",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "testcontainers>=3.7.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "httpx>=0.27.0",
]

[project.scripts]
py-rest-service-server = "ybor_technologies.big_rooster.py_rest.service.server.main:main"
py-rest-service-migrate = "ybor_technologies.big_rooster.py_rest.service.server.migration:main"
benchmark = "scripts.benchmark:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["scripts"]

# Build hooks removed - individual packages handle their own builds

[tool.uv.sources]
py-rest-service-core = { path = "py-rest-service-core", editable = true }
py-rest-service-persistence = { path = "py-rest-service-persistence", editable = true }
py-rest-service-api = { path = "py-rest-service-api", editable = true }
py-rest-service-client = { path = "py-rest-service-client", editable = true }
py-rest-service-server = { path = "py-rest-service-server", editable = true }


[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=ybor-technologies --cov-report=term-missing --cov-report=html"
testpaths = [
    "py-rest-service-integration-tests/tests"
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["ybor-technologies"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
